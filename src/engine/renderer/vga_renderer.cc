//
// Created by igor on 14/06/2021.
//

#include <neutrino/engine/renderer/vga_renderer.hh>
#include <neutrino/sdl/window.hh>
#include <neutrino/sdl/surface.hh>
#include <neutrino/sdl/palette.hh>
#include <array>

#define C(r, g, b) neutrino::sdl::color{r,g,b}

static std::array<neutrino::sdl::color, 256> colors  {C(0, 0, 0), C(0, 0, 170), C(0, 170, 0), C(0, 170, 170),
                                             C(170, 0, 0), C(170, 0, 170), C(170, 85, 0), C(170, 170, 170),
                                             C(85, 85, 85), C(85, 85, 255), C(85, 255, 85), C(85, 255, 255),
                                             C(255, 85, 85), C(255, 85, 255), C(255, 255, 85), C(255, 255, 255),
                                             C(0, 0, 0), C(20, 20, 20), C(32, 32, 32), C(44, 44, 44),
                                             C(56, 56, 56), C(69, 69, 69), C(81, 81, 81), C(97, 97, 97),
                                             C(113, 113, 113), C(130, 130, 130), C(146, 146, 146), C(162, 162, 162),
                                             C(182, 182, 182), C(203, 203, 203), C(227, 227, 227), C(255, 255, 255),
                                             C(0, 0, 255), C(65, 0, 255), C(125, 0, 255), C(190, 0, 255),
                                             C(255, 0, 255), C(255, 0, 190), C(255, 0, 125), C(255, 0, 65),
                                             C(255, 0, 0), C(255, 65, 0), C(255, 125, 0), C(255, 190, 0),
                                             C(255, 255, 0), C(190, 255, 0), C(125, 255, 0), C(65, 255, 0),
                                             C(0, 255, 0), C(0, 255, 65), C(0, 255, 125), C(0, 255, 190),
                                             C(0, 255, 255), C(0, 190, 255), C(0, 125, 255), C(0, 65, 255),
                                             C(125, 125, 255), C(158, 125, 255), C(190, 125, 255), C(223, 125, 255),
                                             C(255, 125, 255), C(255, 125, 223), C(255, 125, 190), C(255, 125, 158),
                                             C(255, 125, 125), C(255, 158, 125), C(255, 190, 125), C(255, 223, 125),
                                             C(255, 255, 125), C(223, 255, 125), C(190, 255, 125), C(158, 255, 125),
                                             C(125, 255, 125), C(125, 255, 158), C(125, 255, 190), C(125, 255, 223),
                                             C(125, 255, 255), C(125, 223, 255), C(125, 190, 255), C(125, 158, 255),
                                             C(182, 182, 255), C(199, 182, 255), C(219, 182, 255), C(235, 182, 255),
                                             C(255, 182, 255), C(255, 182, 235), C(255, 182, 219), C(255, 182, 199),
                                             C(255, 182, 182), C(255, 199, 182), C(255, 219, 182), C(255, 235, 182),
                                             C(255, 255, 182), C(235, 255, 182), C(219, 255, 182), C(199, 255, 182),
                                             C(182, 255, 182), C(182, 255, 199), C(182, 255, 219), C(182, 255, 235),
                                             C(182, 255, 255), C(182, 235, 255), C(182, 219, 255), C(182, 199, 255),
                                             C(0, 0, 113), C(28, 0, 113), C(56, 0, 113), C(85, 0, 113),
                                             C(113, 0, 113), C(113, 0, 85), C(113, 0, 56), C(113, 0, 28),
                                             C(113, 0, 0), C(113, 28, 0), C(113, 56, 0), C(113, 85, 0),
                                             C(113, 113, 0), C(85, 113, 0), C(56, 113, 0), C(28, 113, 0),
                                             C(0, 113, 0), C(0, 113, 28), C(0, 113, 56), C(0, 113, 85),
                                             C(0, 113, 113), C(0, 85, 113), C(0, 56, 113), C(0, 28, 113),
                                             C(56, 56, 113), C(69, 56, 113), C(85, 56, 113), C(97, 56, 113),
                                             C(113, 56, 113), C(113, 56, 97), C(113, 56, 85), C(113, 56, 69),
                                             C(113, 56, 56), C(113, 69, 56), C(113, 85, 56), C(113, 97, 56),
                                             C(113, 113, 56), C(97, 113, 56), C(85, 113, 56), C(69, 113, 56),
                                             C(56, 113, 56), C(56, 113, 69), C(56, 113, 85), C(56, 113, 97),
                                             C(56, 113, 113), C(56, 97, 113), C(56, 85, 113), C(56, 69, 113),
                                             C(81, 81, 113), C(89, 81, 113), C(97, 81, 113), C(105, 81, 113),
                                             C(113, 81, 113), C(113, 81, 105), C(113, 81, 97), C(113, 81, 89),
                                             C(113, 81, 81), C(113, 89, 81), C(113, 97, 81), C(113, 105, 81),
                                             C(113, 113, 81), C(105, 113, 81), C(97, 113, 81), C(89, 113, 81),
                                             C(81, 113, 81), C(81, 113, 89), C(81, 113, 97), C(81, 113, 105),
                                             C(81, 113, 113), C(81, 105, 113), C(81, 97, 113), C(81, 89, 113),
                                             C(0, 0, 65), C(16, 0, 65), C(32, 0, 65), C(48, 0, 65),
                                             C(65, 0, 65), C(65, 0, 48), C(65, 0, 32), C(65, 0, 16),
                                             C(65, 0, 0), C(65, 16, 0), C(65, 32, 0), C(65, 48, 0),
                                             C(65, 65, 0), C(48, 65, 0), C(32, 65, 0), C(16, 65, 0),
                                             C(0, 65, 0), C(0, 65, 16), C(0, 65, 32), C(0, 65, 48),
                                             C(0, 65, 65), C(0, 48, 65), C(0, 32, 65), C(0, 16, 65),
                                             C(32, 32, 65), C(40, 32, 65), C(48, 32, 65), C(56, 32, 65),
                                             C(65, 32, 65), C(65, 32, 56), C(65, 32, 48), C(65, 32, 40),
                                             C(65, 32, 32), C(65, 40, 32), C(65, 48, 32), C(65, 56, 32),
                                             C(65, 65, 32), C(56, 65, 32), C(48, 65, 32), C(40, 65, 32),
                                             C(32, 65, 32), C(32, 65, 40), C(32, 65, 48), C(32, 65, 56),
                                             C(32, 65, 65), C(32, 56, 65), C(32, 48, 65), C(32, 40, 65),
                                             C(44, 44, 65), C(48, 44, 65), C(52, 44, 65), C(60, 44, 65),
                                             C(65, 44, 65), C(65, 44, 60), C(65, 44, 52), C(65, 44, 48),
                                             C(65, 44, 44), C(65, 48, 44), C(65, 52, 44), C(65, 60, 44),
                                             C(65, 65, 44), C(60, 65, 44), C(52, 65, 44), C(48, 65, 44),
                                             C(44, 65, 44), C(44, 65, 48), C(44, 65, 52), C(44, 65, 60),
                                             C(44, 65, 65), C(44, 60, 65), C(44, 52, 65), C(44, 48, 65),
                                             C(0, 0, 0), C(0, 0, 0), C(0, 0, 0), C(0, 0, 0),
                                             C(0, 0, 0), C(0, 0, 0), C(0, 0, 0), C(0, 0, 0)};

namespace neutrino::engine {
    struct vga_renderer::impl {
        explicit impl(sdl::window&& w, int width, int height)
        : window(std::move(w)),
          window_surface (sdl::surface(window)),
          work(sdl::surface::make_8bit(width, height)),
          work_win_format(width, height, window_surface.get_pixel_format())
        {

        }
        sdl::window  window;
        sdl::surface window_surface;
        sdl::surface work;
        sdl::surface work_win_format;
    };
    // ================================================================================
    void vga_renderer::open (const basic_window& window) {
        auto w = sdl::window::by_id(window.id());
        auto [width, height] = w.size();
        m_pimpl = new impl(std::move(w), width, height);
        m_pimpl->work.get_palette().fill(colors.begin(), colors.end());
    }
    // --------------------------------------------------------------------------------
    void vga_renderer::invalidate(const basic_window& window) {
        auto w = sdl::window::by_id(window.id());
        m_pimpl->window_surface = sdl::surface(w);
    }
    // --------------------------------------------------------------------------------
    vga_renderer::~vga_renderer() {
        delete m_pimpl;
    }
    // --------------------------------------------------------------------------------
    void vga_renderer::clear() {
        m_pimpl->work.fill(0);
    }
    // --------------------------------------------------------------------------------
    void vga_renderer::present() {
        unsigned work_w, work_h, surf_w, surf_h;
        std::tie(std::ignore, std::ignore, work_w, work_h) = m_pimpl->work.pixels_data();
        std::tie(std::ignore, std::ignore, surf_w, surf_h) = m_pimpl->window_surface.pixels_data();

        if (work_w != surf_w || work_h != surf_h) {
            m_pimpl->work.blit(m_pimpl->work_win_format);
            m_pimpl->work_win_format.blit_scaled(m_pimpl->window_surface);
        } else {
            m_pimpl->work.blit(m_pimpl->window_surface);
        }
        m_pimpl->window.update_surface();
    }
    // --------------------------------------------------------------------------------
    basic_window::window_kind_t vga_renderer::window_kind() const noexcept {
        return basic_window::SIMPLE;
    }
    // --------------------------------------------------------------------------------
    sdl::surface& vga_renderer::surface() noexcept {
        return m_pimpl->work;
    }
    // --------------------------------------------------------------------------------
    sdl::surface& vga_renderer::surface() const noexcept {
        return m_pimpl->work;
    }
    // --------------------------------------------------------------------------------
    sdl::palette vga_renderer::standard_palette() {
        return sdl::palette (colors.begin(), colors.end());
    }

}